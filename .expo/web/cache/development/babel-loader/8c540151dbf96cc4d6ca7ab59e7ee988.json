{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { Pressable, Box, HStack, useColorModeValue, Icon, Input, useToken } from 'native-base';\nimport AnimatedCheckbox from 'react-native-checkbox-reanimated';\nimport AnimatedTaskLabel from \"./animated-task-label\";\nimport SwipableView from \"./swipable-view\";\nimport { Feather } from '@expo/vector-icons';\n\nvar TaskItem = function TaskItem(props) {\n  var isEditing = props.isEditing,\n      isDone = props.isDone,\n      onToggleCheckbox = props.onToggleCheckbox,\n      subject = props.subject,\n      onPressLabel = props.onPressLabel,\n      onRemove = props.onRemove,\n      onChangeSubject = props.onChangeSubject,\n      onFinishEditing = props.onFinishEditing,\n      simultaneousHandlers = props.simultaneousHandlers;\n  var highlightColor = useToken('colors', useColorModeValue('blue.500', 'blue.400'));\n  var boxStroke = useToken('colors', useColorModeValue('muted.300', 'muted.500'));\n  var checkmarkColor = useToken('colors', useColorModeValue('white', 'white'));\n  var activeTextColor = useToken('colors', useColorModeValue('darkText', 'lightText'));\n  var doneTextColor = useToken('colors', useColorModeValue('muted.400', 'muted.600'));\n  var handleChangeSubject = useCallback(function (e) {\n    onChangeSubject && onChangeSubject(e.nativeEvent.text);\n  }, [onChangeSubject]);\n  return React.createElement(SwipableView, {\n    simultaneousHandlers: simultaneousHandlers,\n    onSwipeLeft: onRemove,\n    backView: React.createElement(Box, {\n      w: \"full\",\n      h: \"full\",\n      bg: \"red.500\",\n      alignItems: \"flex-end\",\n      justifyContent: \"center\",\n      pr: 4\n    }, React.createElement(Icon, {\n      color: \"white\",\n      as: React.createElement(Feather, {\n        name: \"trash-2\"\n      }),\n      size: \"sm\"\n    }))\n  }, React.createElement(HStack, {\n    alignItems: \"center\",\n    w: \"full\",\n    px: 4,\n    py: 2,\n    bg: useColorModeValue('warmGray.50', 'primary.900')\n  }, React.createElement(Box, {\n    width: 30,\n    height: 30,\n    mr: 2\n  }, React.createElement(Pressable, {\n    onPress: onToggleCheckbox\n  }, React.createElement(AnimatedCheckbox, {\n    highlightColor: highlightColor,\n    checkmarkColor: checkmarkColor,\n    boxOutlineColor: boxStroke,\n    checked: isDone\n  }))), isEditing ? React.createElement(Input, {\n    placeholder: \"Task\",\n    value: subject,\n    variant: \"unstyled\",\n    fontSize: 19,\n    px: 1,\n    py: 0,\n    autoFocus: true,\n    blurOnSubmit: true,\n    onChange: handleChangeSubject,\n    onBlur: onFinishEditing\n  }) : React.createElement(AnimatedTaskLabel, {\n    textColor: activeTextColor,\n    inactiveTextColor: doneTextColor,\n    strikethrough: isDone,\n    onPress: onPressLabel\n  }, subject)));\n};\n\nexport default TaskItem;","map":{"version":3,"sources":["/home/antonio/develop/react/ToDoList/src/components/task-item.tsx"],"names":["React","useCallback","Pressable","Box","HStack","useColorModeValue","Icon","Input","useToken","AnimatedCheckbox","AnimatedTaskLabel","SwipableView","Feather","TaskItem","props","isEditing","isDone","onToggleCheckbox","subject","onPressLabel","onRemove","onChangeSubject","onFinishEditing","simultaneousHandlers","highlightColor","boxStroke","checkmarkColor","activeTextColor","doneTextColor","handleChangeSubject","e","nativeEvent","text"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport { PanGestureHandlerProps } from 'react-native-gesture-handler'\nimport { NativeSyntheticEvent, TextInputChangeEventData } from 'react-native'\nimport {\n  Pressable,\n  Box,\n  HStack,\n  useColorModeValue,\n  Icon,\n  Input,\n  useToken\n} from 'native-base'\nimport AnimatedCheckbox from 'react-native-checkbox-reanimated'\nimport AnimatedTaskLabel from './animated-task-label'\nimport SwipableView from './swipable-view'\nimport { Feather } from '@expo/vector-icons'\n\ninterface Props extends Pick<PanGestureHandlerProps, 'simultaneousHandlers'> {\n  isEditing: boolean\n  isDone: boolean\n  onToggleCheckbox?: () => void\n  onPressLabel?: () => void\n  onRemove?: () => void\n  onChangeSubject?: (subject: string) => void\n  onFinishEditing?: () => void\n  subject: string\n}\n\nconst TaskItem = (props: Props) => {\n  const {\n    isEditing,\n    isDone,\n    onToggleCheckbox,\n    subject,\n    onPressLabel,\n    onRemove,\n    onChangeSubject,\n    onFinishEditing,\n    simultaneousHandlers\n  } = props\n\n  const highlightColor = useToken(\n    'colors',\n    useColorModeValue('blue.500', 'blue.400')\n  )\n  const boxStroke = useToken(\n    'colors',\n    useColorModeValue('muted.300', 'muted.500')\n  )\n\n  const checkmarkColor = useToken('colors', useColorModeValue('white', 'white'))\n\n  const activeTextColor = useToken(\n    'colors',\n    useColorModeValue('darkText', 'lightText')\n  )\n  const doneTextColor = useToken(\n    'colors',\n    useColorModeValue('muted.400', 'muted.600')\n  )\n\n  const handleChangeSubject = useCallback(\n    (e: NativeSyntheticEvent<TextInputChangeEventData>) => {\n      onChangeSubject && onChangeSubject(e.nativeEvent.text)\n    },\n    [onChangeSubject]\n  )\n\n  return (\n    <SwipableView\n      simultaneousHandlers={simultaneousHandlers}\n      onSwipeLeft={onRemove}\n      backView={\n        <Box\n          w=\"full\"\n          h=\"full\"\n          bg=\"red.500\"\n          alignItems=\"flex-end\"\n          justifyContent=\"center\"\n          pr={4}\n        >\n          <Icon color=\"white\" as={<Feather name=\"trash-2\" />} size=\"sm\" />\n        </Box>\n      }\n    >\n      <HStack\n        alignItems=\"center\"\n        w=\"full\"\n        px={4}\n        py={2}\n        bg={useColorModeValue('warmGray.50', 'primary.900')}\n      >\n        <Box width={30} height={30} mr={2}>\n          <Pressable onPress={onToggleCheckbox}>\n            <AnimatedCheckbox\n              highlightColor={highlightColor}\n              checkmarkColor={checkmarkColor}\n              boxOutlineColor={boxStroke}\n              checked={isDone}\n            />\n          </Pressable>\n        </Box>\n        {isEditing ? (\n          <Input\n            placeholder=\"Task\"\n            value={subject}\n            variant=\"unstyled\"\n            fontSize={19}\n            px={1}\n            py={0}\n            autoFocus\n            blurOnSubmit\n            onChange={handleChangeSubject}\n            onBlur={onFinishEditing}\n          />\n        ) : (\n          <AnimatedTaskLabel\n            textColor={activeTextColor}\n            inactiveTextColor={doneTextColor}\n            strikethrough={isDone}\n            onPress={onPressLabel}\n          >\n            {subject}\n          </AnimatedTaskLabel>\n        )}\n      </HStack>\n    </SwipableView>\n  )\n}\n\nexport default TaskItem\n"]},"metadata":{},"sourceType":"module"}