{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"bg\"];\nimport React, { useEffect } from 'react';\nimport { Box, useToken } from 'native-base';\nimport usePrevious from \"../utils/use-previous\";\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming, interpolateColor } from 'react-native-reanimated';\nvar AnimatedBox = Animated.createAnimatedComponent(Box);\n\nvar AnimatedColorBox = function AnimatedColorBox(_ref) {\n  var bg = _ref.bg,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var hexBg = useToken('colors', bg);\n  var prevHexBg = usePrevious(hexBg);\n  var progress = useSharedValue(0);\n  useEffect(function () {\n    progress.value = 0;\n  }, [hexBg]);\n  var animatedStyles = useAnimatedStyle(function () {\n    const _f = function () {\n      progress.value = withTiming(1, {\n        duration: 200\n      });\n      return {\n        backgroundColor: interpolateColor(progress.value, [0, 1], [prevHexBg || hexBg, hexBg])\n      };\n    };\n\n    _f._closure = {\n      progress,\n      withTiming,\n      interpolateColor,\n      prevHexBg,\n      hexBg\n    };\n    _f.asString = \"function _f(){const{progress,withTiming,interpolateColor,prevHexBg,hexBg}=jsThis._closure;{progress.value=withTiming(1,{duration:200});return{backgroundColor:interpolateColor(progress.value,[0,1],[prevHexBg||hexBg,hexBg])};}}\";\n    _f.__workletHash = 16102376101438;\n    _f.__location = \"/home/antonio/develop/react/ToDoList/src/components/animated-color-box.tsx (22:42)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [hexBg]);\n  return React.createElement(AnimatedBox, _extends({}, props, {\n    style: animatedStyles\n  }));\n};\n\nexport default AnimatedColorBox;","map":{"version":3,"sources":["/home/antonio/develop/react/ToDoList/src/components/animated-color-box.tsx"],"names":["React","useEffect","Box","useToken","usePrevious","Animated","useSharedValue","useAnimatedStyle","withTiming","interpolateColor","AnimatedBox","createAnimatedComponent","AnimatedColorBox","bg","props","hexBg","prevHexBg","progress","value","animatedStyles","duration","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,aAA9B;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP,IACEC,cADF,EAEEC,gBAFF,EAGEC,UAHF,EAIEC,gBAJF,QAKO,yBALP;AAOA,IAAMC,WAAW,GAAGL,QAAQ,CAACM,uBAAT,CAAiCT,GAAjC,CAApB;;AAEA,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,OAA2B;AAAA,MAAxBC,EAAwB,QAAxBA,EAAwB;AAAA,MAAjBC,KAAiB;;AAClD,MAAMC,KAAK,GAAGZ,QAAQ,CAAC,QAAD,EAAWU,EAAX,CAAtB;AACA,MAAMG,SAAS,GAAGZ,WAAW,CAACW,KAAD,CAA7B;AACA,MAAME,QAAQ,GAAGX,cAAc,CAAC,CAAD,CAA/B;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,QAAQ,CAACC,KAAT,GAAiB,CAAjB;AACD,GAFQ,EAEN,CAACH,KAAD,CAFM,CAAT;AAIA,MAAMI,cAAc,GAAGZ,gBAAgB;AAAA,2BAAO;AAC5CU,MAAAA,QAAQ,CAACC,KAAT,GAAiBV,UAAU,CAAC,CAAD,EAAI;AAAEY,QAAAA,QAAQ,EAAE;AAAZ,OAAJ,CAA3B;AACA,aAAO;AACLC,QAAAA,eAAe,EAAEZ,gBAAgB,CAC/BQ,QAAQ,CAACC,KADsB,EAE/B,CAAC,CAAD,EAAI,CAAJ,CAF+B,EAG/B,CAACF,SAAS,IAAID,KAAd,EAAqBA,KAArB,CAH+B;AAD5B,OAAP;AAOD,KATsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,OASpC,CAACA,KAAD,CAToC,CAAvC;AAUA,SAAO,oBAAC,WAAD,eAAiBD,KAAjB;AAAwB,IAAA,KAAK,EAAEK;AAA/B,KAAP;AACD,CApBD;;AAsBA,eAAeP,gBAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Box, useToken } from 'native-base'\nimport usePrevious from '../utils/use-previous'\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  interpolateColor\n} from 'react-native-reanimated'\n\nconst AnimatedBox = Animated.createAnimatedComponent(Box)\n\nconst AnimatedColorBox = ({ bg, ...props }: any) => {\n  const hexBg = useToken('colors', bg)\n  const prevHexBg = usePrevious(hexBg)\n  const progress = useSharedValue(0)\n\n  useEffect(() => {\n    progress.value = 0\n  }, [hexBg])\n\n  const animatedStyles = useAnimatedStyle(() => {\n    progress.value = withTiming(1, { duration: 200 })\n    return {\n      backgroundColor: interpolateColor(\n        progress.value,\n        [0, 1],\n        [prevHexBg || hexBg, hexBg]\n      )\n    }\n  }, [hexBg])\n  return <AnimatedBox {...props} style={animatedStyles} />\n}\n\nexport default AnimatedColorBox\n"]},"metadata":{},"sourceType":"module"}