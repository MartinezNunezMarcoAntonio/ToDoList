{"ast":null,"code":"import React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedGestureHandler, useSharedValue, useAnimatedStyle } from 'react-native-reanimated';\nimport { Box } from 'native-base';\nimport { makeStyledComponent } from \"../utils/styled\";\nvar StyledView = makeStyledComponent(Animated.View);\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width;\n\nvar SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.2;\n\nvar SwipeView = function SwipeView(props) {\n  var children = props.children,\n      backView = props.backView,\n      onSwipeLeft = props.onSwipeLeft,\n      simultaneousHandlers = props.simultaneousHandlers;\n  var translateX = useSharedValue(0);\n  var panGesture = useAnimatedGestureHandler({});\n  var facadeStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      return {\n        transform: [{\n          translateX: translateX.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      translateX\n    };\n    _f.asString = \"function _f(){const{translateX}=jsThis._closure;{return{transform:[{translateX:translateX.value}]};}}\";\n    _f.__workletHash = 5449807444231;\n    _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (37:39)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(StyledView, {\n    w: \"full\"\n  }, backView && React.createElement(Box, {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  }, backView), React.createElement(PanGestureHandler, {\n    simultaneousHandlers: simultaneousHandlers,\n    onGestureEvent: panGesture\n  }, React.createElement(StyledView, {\n    style: facadeStyle\n  }, children)));\n};\n\nexport default SwipeView;","map":{"version":3,"sources":["/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx"],"names":["React","PanGestureHandler","Animated","useAnimatedGestureHandler","useSharedValue","useAnimatedStyle","Box","makeStyledComponent","StyledView","View","Dimensions","get","SCREEN_WIDTH","width","SWIPE_THRESHOLD","SwipeView","props","children","backView","onSwipeLeft","simultaneousHandlers","translateX","panGesture","facadeStyle","transform","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SACEC,iBADF,QAIO,8BAJP;AAKA,OAAOC,QAAP,IACEC,yBADF,EAEEC,cAFF,EAGEC,gBAHF,QAMO,yBANP;AAOA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT;AAEA,IAAMC,UAAU,GAAGD,mBAAmB,CAACL,QAAQ,CAACO,IAAV,CAAtC;;AAQA,sBAAgCC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAhC;AAAA,IAAeC,YAAf,mBAAQC,KAAR;;AACA,IAAMC,eAAe,GAAG,CAACF,YAAD,GAAgB,GAAxC;;AAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAkB;AAClC,MAAQC,QAAR,GAAkED,KAAlE,CAAQC,QAAR;AAAA,MAAkBC,QAAlB,GAAkEF,KAAlE,CAAkBE,QAAlB;AAAA,MAA4BC,WAA5B,GAAkEH,KAAlE,CAA4BG,WAA5B;AAAA,MAAyCC,oBAAzC,GAAkEJ,KAAlE,CAAyCI,oBAAzC;AACA,MAAMC,UAAU,GAAGjB,cAAc,CAAC,CAAD,CAAjC;AAEA,MAAMkB,UAAU,GAAGnB,yBAAyB,CAAgC,EAAhC,CAA5C;AAIA,MAAMoB,WAAW,GAAGlB,gBAAgB;AAAA;AAAA,aAAQ;AAC1CmB,QAAAA,SAAS,EAAE,CACT;AACEH,UAAAA,UAAU,EAAEA,UAAU,CAACI;AADzB,SADS;AAD+B,OAAR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAApC;AAQA,SACE,oBAAC,UAAD;AAAY,IAAA,CAAC,EAAC;AAAd,KACGP,QAAQ,IACP,oBAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAyB,IAAA,IAAI,EAAE,CAA/B;AAAkC,IAAA,KAAK,EAAE,CAAzC;AAA4C,IAAA,GAAG,EAAE,CAAjD;AAAoD,IAAA,MAAM,EAAE;AAA5D,KACGA,QADH,CAFJ,EAME,oBAAC,iBAAD;AACE,IAAA,oBAAoB,EAAEE,oBADxB;AAEE,IAAA,cAAc,EAAEE;AAFlB,KAIE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEC;AAAnB,KAAiCN,QAAjC,CAJF,CANF,CADF;AAeD,CA/BD;;AAiCA,eAAeF,SAAf","sourcesContent":["import React from 'react'\nimport { Dimensions } from 'react-native'\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  PanGestureHandlerProps\n} from 'react-native-gesture-handler'\nimport Animated, {\n  useAnimatedGestureHandler,\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  runOnJS\n} from 'react-native-reanimated'\nimport { Box } from 'native-base'\nimport { makeStyledComponent } from '../utils/styled'\n\nconst StyledView = makeStyledComponent(Animated.View)\n\ninterface Props extends Pick<PanGestureHandlerProps, 'simultaneousHandlers'> {\n  children: React.ReactNode\n  backView?: React.ReactNode\n  onSwipeLeft?: () => void\n}\n\nconst { width: SCREEN_WIDTH } = Dimensions.get('window')\nconst SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.2\n\nconst SwipeView = (props: Props) => {\n  const { children, backView, onSwipeLeft, simultaneousHandlers } = props\n  const translateX = useSharedValue(0)\n\n  const panGesture = useAnimatedGestureHandler<PanGestureHandlerGestureEvent>({\n    \n  })\n\n  const facadeStyle = useAnimatedStyle(() => ({\n    transform: [\n      {\n        translateX: translateX.value\n      }\n    ]\n  }))\n\n  return (\n    <StyledView w=\"full\">\n      {backView && (\n        <Box position=\"absolute\" left={0} right={0} top={0} bottom={0}>\n          {backView}\n        </Box>\n      )}\n      <PanGestureHandler\n        simultaneousHandlers={simultaneousHandlers}\n        onGestureEvent={panGesture}\n      >\n        <StyledView style={facadeStyle}>{children}</StyledView>\n      </PanGestureHandler>\n    </StyledView>\n  )\n}\n\nexport default SwipeView\n"]},"metadata":{},"sourceType":"module"}