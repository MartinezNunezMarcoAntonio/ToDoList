{"ast":null,"code":"import React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedGestureHandler, useSharedValue, useAnimatedStyle, withTiming, runOnJS } from 'react-native-reanimated';\nimport { Box } from 'native-base';\nimport { makeStyledComponent } from \"../utils/styled\";\nvar StyledView = makeStyledComponent(Animated.View);\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width;\n\nvar SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.2;\n\nvar SwipeView = function () {\n  var _f = function _f(props) {\n    var children = props.children,\n        backView = props.backView,\n        onSwipeLeft = props.onSwipeLeft,\n        simultaneousHandlers = props.simultaneousHandlers;\n    var translateX = useSharedValue(0);\n    var panGesture = useAnimatedGestureHandler({\n      onActive: function () {\n        var _f = function _f(event) {\n          translateX.value = Math.max(-128, Math.min(0, event.translationX));\n        };\n\n        _f._closure = {\n          translateX: translateX\n        };\n        _f.asString = \"function onActive(event){const{translateX}=jsThis._closure;{translateX.value=Math.max(-128,Math.min(0,event.translationX));}}\";\n        _f.__workletHash = 626933894293;\n        _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (35:14)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }(),\n      onEnd: function () {\n        var _f = function _f() {\n          var shouldBeDismissed = translateX.value < SWIPE_THRESHOLD;\n\n          if (shouldBeDismissed) {\n            translateX.value = withTiming(-SCREEN_WIDTH);\n            onSwipeLeft && runOnJS(onSwipeLeft)();\n          } else {\n            translateX.value = withTiming(0);\n          }\n        };\n\n        _f._closure = {\n          translateX: translateX,\n          SWIPE_THRESHOLD: SWIPE_THRESHOLD,\n          withTiming: withTiming,\n          SCREEN_WIDTH: SCREEN_WIDTH,\n          onSwipeLeft: onSwipeLeft,\n          runOnJS: runOnJS\n        };\n        _f.asString = \"function onEnd(){const{translateX,SWIPE_THRESHOLD,withTiming,SCREEN_WIDTH,onSwipeLeft,runOnJS}=jsThis._closure;{var shouldBeDismissed=translateX.value<SWIPE_THRESHOLD;if(shouldBeDismissed){translateX.value=withTiming(-SCREEN_WIDTH);onSwipeLeft&&runOnJS(onSwipeLeft)();}else{translateX.value=withTiming(0);}}}\";\n        _f.__workletHash = 14986184262017;\n        _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (38:11)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }()\n    });\n    var facadeStyle = useAnimatedStyle(function () {\n      var _f = function _f() {\n        return {\n          transform: [{\n            translateX: translateX.value\n          }]\n        };\n      };\n\n      _f._closure = {\n        translateX: translateX\n      };\n      _f.asString = \"function _f(){const{translateX}=jsThis._closure;{return{transform:[{translateX:translateX.value}]};}}\";\n      _f.__workletHash = 5449807444231;\n      _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (49:39)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }());\n    return React.createElement(StyledView, {\n      w: \"full\"\n    }, backView && React.createElement(Box, {\n      position: \"absolute\",\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, backView), React.createElement(PanGestureHandler, {\n      simultaneousHandlers: simultaneousHandlers,\n      onGestureEvent: panGesture\n    }, React.createElement(StyledView, {\n      style: facadeStyle\n    }, children)));\n  };\n\n  _f._closure = {\n    useSharedValue: useSharedValue,\n    useAnimatedGestureHandler: useAnimatedGestureHandler,\n    SWIPE_THRESHOLD: SWIPE_THRESHOLD,\n    withTiming: withTiming,\n    SCREEN_WIDTH: SCREEN_WIDTH,\n    runOnJS: runOnJS,\n    useAnimatedStyle: useAnimatedStyle,\n    React: {\n      createElement: React.createElement\n    },\n    StyledView: StyledView,\n    Box: Box,\n    PanGestureHandler: PanGestureHandler\n  };\n  _f.asString = \"function _f(props){const{useSharedValue,useAnimatedGestureHandler,SWIPE_THRESHOLD,withTiming,SCREEN_WIDTH,runOnJS,useAnimatedStyle,React,StyledView,Box,PanGestureHandler}=jsThis._closure;{var children=props.children,backView=props.backView,onSwipeLeft=props.onSwipeLeft,simultaneousHandlers=props.simultaneousHandlers;var translateX=useSharedValue(0);var panGesture=useAnimatedGestureHandler({onActive:function(){const _f=function(event){translateX.value=Math.max(-128,Math.min(0,event.translationX));};_f._closure={translateX};_f.asString=\\\"function onActive(event){const{translateX}=jsThis._closure;{translateX.value=Math.max(-128,Math.min(0,event.translationX));}}\\\";_f.__workletHash=626933894293;_f.__location=\\\"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (35:14)\\\";global.__reanimatedWorkletInit(_f);return _f;}(),onEnd:function(){const _f=function(){var shouldBeDismissed=translateX.value<SWIPE_THRESHOLD;if(shouldBeDismissed){translateX.value=withTiming(-SCREEN_WIDTH);onSwipeLeft&&runOnJS(onSwipeLeft)();}else{translateX.value=withTiming(0);}};_f._closure={translateX,SWIPE_THRESHOLD,withTiming,SCREEN_WIDTH,onSwipeLeft,runOnJS};_f.asString=\\\"function onEnd(){const{translateX,SWIPE_THRESHOLD,withTiming,SCREEN_WIDTH,onSwipeLeft,runOnJS}=jsThis._closure;{var shouldBeDismissed=translateX.value<SWIPE_THRESHOLD;if(shouldBeDismissed){translateX.value=withTiming(-SCREEN_WIDTH);onSwipeLeft&&runOnJS(onSwipeLeft)();}else{translateX.value=withTiming(0);}}}\\\";_f.__workletHash=14986184262017;_f.__location=\\\"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (38:11)\\\";global.__reanimatedWorkletInit(_f);return _f;}()});var facadeStyle=useAnimatedStyle(function(){const _f=function(){return{transform:[{translateX:translateX.value}]};};_f._closure={translateX};_f.asString=\\\"function _f(){const{translateX}=jsThis._closure;{return{transform:[{translateX:translateX.value}]};}}\\\";_f.__workletHash=5449807444231;_f.__location=\\\"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (49:39)\\\";global.__reanimatedWorkletInit(_f);return _f;}());return React.createElement(StyledView,{w:\\\"full\\\"},backView&&React.createElement(Box,{position:\\\"absolute\\\",left:0,right:0,top:0,bottom:0},backView),React.createElement(PanGestureHandler,{simultaneousHandlers:simultaneousHandlers,onGestureEvent:panGesture},React.createElement(StyledView,{style:facadeStyle},children)));}}\";\n  _f.__workletHash = 10752909290864;\n  _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (29:18)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport default SwipeView;","map":{"version":3,"sources":["/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx"],"names":["React","PanGestureHandler","Animated","useAnimatedGestureHandler","useSharedValue","useAnimatedStyle","withTiming","runOnJS","Box","makeStyledComponent","StyledView","View","Dimensions","get","SCREEN_WIDTH","width","SWIPE_THRESHOLD","SwipeView","props","children","backView","onSwipeLeft","simultaneousHandlers","translateX","panGesture","onActive","event","value","Math","max","min","translationX","onEnd","shouldBeDismissed","facadeStyle","transform","createElement"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Dimensions } from 'react-native'\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  PanGestureHandlerProps\n} from 'react-native-gesture-handler'\nimport Animated, {\n  useAnimatedGestureHandler,\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  runOnJS\n} from 'react-native-reanimated'\nimport { Box } from 'native-base'\nimport { makeStyledComponent } from '../utils/styled'\n\nconst StyledView = makeStyledComponent(Animated.View)\n\ninterface Props extends Pick<PanGestureHandlerProps, 'simultaneousHandlers'> {\n  children: React.ReactNode\n  backView?: React.ReactNode\n  onSwipeLeft?: () => void\n}\n\nconst { width: SCREEN_WIDTH } = Dimensions.get('window')\nconst SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.2\n\nconst SwipeView = (props: Props) => {\n  \"worklet\";\n  const { children, backView, onSwipeLeft, simultaneousHandlers } = props\n  const translateX = useSharedValue(0)\n\n  const panGesture = useAnimatedGestureHandler<PanGestureHandlerGestureEvent>({\n    onActive: event => {\n      translateX.value = Math.max(-128, Math.min(0, event.translationX))\n    },\n    onEnd: () => {\n      const shouldBeDismissed = translateX.value < SWIPE_THRESHOLD\n      if (shouldBeDismissed) {\n        translateX.value = withTiming(-SCREEN_WIDTH)\n        onSwipeLeft && runOnJS(onSwipeLeft)()\n      } else {\n        translateX.value = withTiming(0)\n      }\n    }\n  })\n\n  const facadeStyle = useAnimatedStyle(() => ({\n    transform: [\n      {\n        translateX: translateX.value\n      }\n    ]\n  }))\n\n  return (\n    <StyledView w=\"full\">\n      {backView && (\n        <Box position=\"absolute\" left={0} right={0} top={0} bottom={0}>\n          {backView}\n        </Box>\n      )}\n      <PanGestureHandler\n        simultaneousHandlers={simultaneousHandlers}\n        onGestureEvent={panGesture}\n      >\n        <StyledView style={facadeStyle}>{children}</StyledView>\n      </PanGestureHandler>\n    </StyledView>\n  )\n}\n\nexport default SwipeView\n"]},"metadata":{},"sourceType":"module"}