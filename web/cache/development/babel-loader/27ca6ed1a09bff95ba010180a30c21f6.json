{"ast":null,"code":"import React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedGestureHandler, useSharedValue, useAnimatedStyle, withTiming, runOnJS } from 'react-native-reanimated';\nimport { Box } from 'native-base';\nimport { makeStyledComponent } from \"../utils/styled\";\nvar StyledView = makeStyledComponent(Animated.View);\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width;\n\nvar SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.2;\n\nvar SwipeView = function SwipeView(props) {\n  var children = props.children,\n      backView = props.backView,\n      onSwipeLeft = props.onSwipeLeft,\n      simultaneousHandlers = props.simultaneousHandlers;\n  var translateX = useSharedValue(0);\n  var panGesture = useAnimatedGestureHandler({\n    onActive: function () {\n      const _f = function (event) {\n        translateX.value = Math.max(-128, Math.min(0, event.translationX));\n      };\n\n      _f._closure = {\n        translateX\n      };\n      _f.asString = \"function onActive(event){const{translateX}=jsThis._closure;{translateX.value=Math.max(-128,Math.min(0,event.translationX));}}\";\n      _f.__workletHash = 626933894293;\n      _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (34:14)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      const _f = function () {\n        var shouldBeDismissed = translateX.value < SWIPE_THRESHOLD;\n\n        if (shouldBeDismissed) {\n          translateX.value = withTiming(-SCREEN_WIDTH);\n          onSwipeLeft && runOnJS(onSwipeLeft)();\n        } else {\n          translateX.value = withTiming(0);\n        }\n      };\n\n      _f._closure = {\n        translateX,\n        SWIPE_THRESHOLD,\n        withTiming,\n        SCREEN_WIDTH,\n        onSwipeLeft,\n        runOnJS\n      };\n      _f.asString = \"function onEnd(){const{translateX,SWIPE_THRESHOLD,withTiming,SCREEN_WIDTH,onSwipeLeft,runOnJS}=jsThis._closure;{var shouldBeDismissed=translateX.value<SWIPE_THRESHOLD;if(shouldBeDismissed){translateX.value=withTiming(-SCREEN_WIDTH);onSwipeLeft&&runOnJS(onSwipeLeft)();}else{translateX.value=withTiming(0);}}}\";\n      _f.__workletHash = 14986184262017;\n      _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (37:11)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  });\n  var facadeStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      return {\n        transform: []\n      };\n    };\n\n    _f._closure = {};\n    _f.asString = \"function _f(){return{transform:[]};}\";\n    _f.__workletHash = 924652258524;\n    _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx (48:39)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(StyledView, {\n    w: \"full\"\n  }, backView && React.createElement(Box, {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  }, backView), React.createElement(PanGestureHandler, {\n    simultaneousHandlers: simultaneousHandlers,\n    onGestureEvent: panGesture\n  }, React.createElement(StyledView, {\n    style: facadeStyle\n  }, children)));\n};\n\nexport default SwipeView;","map":{"version":3,"sources":["/home/antonio/develop/react/react-native-animated-todo/src/components/swipable-view.tsx"],"names":["React","PanGestureHandler","Animated","useAnimatedGestureHandler","useSharedValue","useAnimatedStyle","withTiming","runOnJS","Box","makeStyledComponent","StyledView","View","Dimensions","get","SCREEN_WIDTH","width","SWIPE_THRESHOLD","SwipeView","props","children","backView","onSwipeLeft","simultaneousHandlers","translateX","panGesture","onActive","event","value","Math","max","min","translationX","onEnd","shouldBeDismissed","facadeStyle","transform"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SACEC,iBADF,QAIO,8BAJP;AAKA,OAAOC,QAAP,IACEC,yBADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,OALF,QAMO,yBANP;AAOA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT;AAEA,IAAMC,UAAU,GAAGD,mBAAmB,CAACP,QAAQ,CAACS,IAAV,CAAtC;;AAQA,sBAAgCC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAhC;AAAA,IAAeC,YAAf,mBAAQC,KAAR;;AACA,IAAMC,eAAe,GAAG,CAACF,YAAD,GAAgB,GAAxC;;AAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAkB;AAClC,MAAQC,QAAR,GAAkED,KAAlE,CAAQC,QAAR;AAAA,MAAkBC,QAAlB,GAAkEF,KAAlE,CAAkBE,QAAlB;AAAA,MAA4BC,WAA5B,GAAkEH,KAAlE,CAA4BG,WAA5B;AAAA,MAAyCC,oBAAzC,GAAkEJ,KAAlE,CAAyCI,oBAAzC;AACA,MAAMC,UAAU,GAAGnB,cAAc,CAAC,CAAD,CAAjC;AAEA,MAAMoB,UAAU,GAAGrB,yBAAyB,CAAgC;AAC1EsB,IAAAA,QAAQ;AAAA,2BAAEC,KAAF,EAAW;AACjBH,QAAAA,UAAU,CAACI,KAAX,GAAmBC,IAAI,CAACC,GAAL,CAAS,CAAC,GAAV,EAAeD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYJ,KAAK,CAACK,YAAlB,CAAf,CAAnB;AACD,OAFO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,OADkE;AAI1EC,IAAAA,KAAK;AAAA,6BAAQ;AACX,YAAMC,iBAAiB,GAAGV,UAAU,CAACI,KAAX,GAAmBX,eAA7C;;AACA,YAAIiB,iBAAJ,EAAuB;AACrBV,UAAAA,UAAU,CAACI,KAAX,GAAmBrB,UAAU,CAAC,CAACQ,YAAF,CAA7B;AACAO,UAAAA,WAAW,IAAId,OAAO,CAACc,WAAD,CAAP,EAAf;AACD,SAHD,MAGO;AACLE,UAAAA,UAAU,CAACI,KAAX,GAAmBrB,UAAU,CAAC,CAAD,CAA7B;AACD;AACF,OARI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAJqE,GAAhC,CAA5C;AAeA,MAAM4B,WAAW,GAAG7B,gBAAgB;AAAA;AAAA,aAAQ;AAC1C8B,QAAAA,SAAS,EAAE;AAD+B,OAAR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAApC;AAKA,SACE,oBAAC,UAAD;AAAY,IAAA,CAAC,EAAC;AAAd,KACGf,QAAQ,IACP,oBAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAyB,IAAA,IAAI,EAAE,CAA/B;AAAkC,IAAA,KAAK,EAAE,CAAzC;AAA4C,IAAA,GAAG,EAAE,CAAjD;AAAoD,IAAA,MAAM,EAAE;AAA5D,KACGA,QADH,CAFJ,EAME,oBAAC,iBAAD;AACE,IAAA,oBAAoB,EAAEE,oBADxB;AAEE,IAAA,cAAc,EAAEE;AAFlB,KAIE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEU;AAAnB,KAAiCf,QAAjC,CAJF,CANF,CADF;AAeD,CAvCD;;AAyCA,eAAeF,SAAf","sourcesContent":["import React from 'react'\nimport { Dimensions } from 'react-native'\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  PanGestureHandlerProps\n} from 'react-native-gesture-handler'\nimport Animated, {\n  useAnimatedGestureHandler,\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  runOnJS\n} from 'react-native-reanimated'\nimport { Box } from 'native-base'\nimport { makeStyledComponent } from '../utils/styled'\n\nconst StyledView = makeStyledComponent(Animated.View)\n\ninterface Props extends Pick<PanGestureHandlerProps, 'simultaneousHandlers'> {\n  children: React.ReactNode\n  backView?: React.ReactNode\n  onSwipeLeft?: () => void\n}\n\nconst { width: SCREEN_WIDTH } = Dimensions.get('window')\nconst SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.2\n\nconst SwipeView = (props: Props) => {\n  const { children, backView, onSwipeLeft, simultaneousHandlers } = props\n  const translateX = useSharedValue(0)\n\n  const panGesture = useAnimatedGestureHandler<PanGestureHandlerGestureEvent>({\n    onActive: event => {\n      translateX.value = Math.max(-128, Math.min(0, event.translationX))\n    },\n    onEnd: () => {\n      const shouldBeDismissed = translateX.value < SWIPE_THRESHOLD\n      if (shouldBeDismissed) {\n        translateX.value = withTiming(-SCREEN_WIDTH)\n        onSwipeLeft && runOnJS(onSwipeLeft)()\n      } else {\n        translateX.value = withTiming(0)\n      }\n    }\n  })\n\n  const facadeStyle = useAnimatedStyle(() => ({\n    transform: [\n    ]\n  }))\n\n  return (\n    <StyledView w=\"full\">\n      {backView && (\n        <Box position=\"absolute\" left={0} right={0} top={0} bottom={0}>\n          {backView}\n        </Box>\n      )}\n      <PanGestureHandler\n        simultaneousHandlers={simultaneousHandlers}\n        onGestureEvent={panGesture}\n      >\n        <StyledView style={facadeStyle}>{children}</StyledView>\n      </PanGestureHandler>\n    </StyledView>\n  )\n}\n\nexport default SwipeView\n"]},"metadata":{},"sourceType":"module"}