{"ast":null,"code":"import React, { useCallback, useRef } from 'react';\nimport { View } from 'moti';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport TaskItem from \"./task-item\";\nimport { makeStyledComponent } from \"../utils/styled\";\nvar StyledView = makeStyledComponent(View);\nvar StyledScrollView = makeStyledComponent(ScrollView);\nexport var AnimatedTaskItem = function AnimatedTaskItem(props) {\n  var simultaneousHandlers = props.simultaneousHandlers,\n      data = props.data,\n      isEditing = props.isEditing,\n      onToggleItem = props.onToggleItem,\n      onChangeSubject = props.onChangeSubject,\n      onFinishEditing = props.onFinishEditing,\n      onPressLabel = props.onPressLabel,\n      onRemove = props.onRemove;\n  var handleToggleCheckbox = useCallback(function () {\n    onToggleItem(data);\n  }, [data, onToggleItem]);\n  var handleChangeSubject = useCallback(function (subject) {\n    onChangeSubject(data, subject);\n  }, [data, onChangeSubject]);\n  var handleFinishEditing = useCallback(function () {\n    onFinishEditing(data);\n  }, [data, onFinishEditing]);\n  var handlePressLabel = useCallback(function () {\n    onPressLabel(data);\n  }, [data, onPressLabel]);\n  var handleRemove = useCallback(function () {\n    onRemove(data);\n  }, [data, onRemove]);\n  return React.createElement(StyledView, {\n    w: \"full\",\n    from: {\n      opacity: 0,\n      scale: 0.5,\n      marginBottom: -46\n    },\n    animate: {\n      opacity: 1,\n      scale: 1,\n      marginBottom: 0\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.5,\n      marginBottom: -46\n    }\n  }, React.createElement(TaskItem, {\n    simultaneousHandlers: simultaneousHandlers,\n    subject: data.subject,\n    isDone: data.done,\n    isEditing: isEditing,\n    onToggleCheckbox: handleToggleCheckbox,\n    onChangeSubject: handleChangeSubject,\n    onFinishEditing: handleFinishEditing,\n    onPressLabel: handlePressLabel,\n    onRemove: handleRemove\n  }));\n};\nexport default function TaskList(props) {\n  var data = props.data,\n      editingItemId = props.editingItemId,\n      onToggleItem = props.onToggleItem,\n      onChangeSubject = props.onChangeSubject,\n      onFinishEditing = props.onFinishEditing,\n      onPressLabel = props.onPressLabel,\n      onRemoveItem = props.onRemoveItem;\n  var refScrollView = useRef(null);\n  return React.createElement(StyledScrollView, {\n    ref: refScrollView,\n    w: \"full\"\n  });\n}","map":{"version":3,"sources":["/home/antonio/develop/react/react-native-animated-todo/src/components/task-list.tsx"],"names":["React","useCallback","useRef","View","ScrollView","TaskItem","makeStyledComponent","StyledView","StyledScrollView","AnimatedTaskItem","props","simultaneousHandlers","data","isEditing","onToggleItem","onChangeSubject","onFinishEditing","onPressLabel","onRemove","handleToggleCheckbox","handleChangeSubject","subject","handleFinishEditing","handlePressLabel","handleRemove","opacity","scale","marginBottom","done","TaskList","editingItemId","onRemoveItem","refScrollView"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAA0BC,IAA1B,QAAsC,MAAtC;AACA,SAEEC,UAFF,QAGO,8BAHP;AAIA,OAAOC,QAAP;AACA,SAASC,mBAAT;AAEA,IAAMC,UAAU,GAAGD,mBAAmB,CAACH,IAAD,CAAtC;AACA,IAAMK,gBAAgB,GAAGF,mBAAmB,CAACF,UAAD,CAA5C;AA6BA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA0B;AACxD,MACEC,oBADF,GASID,KATJ,CACEC,oBADF;AAAA,MAEEC,IAFF,GASIF,KATJ,CAEEE,IAFF;AAAA,MAGEC,SAHF,GASIH,KATJ,CAGEG,SAHF;AAAA,MAIEC,YAJF,GASIJ,KATJ,CAIEI,YAJF;AAAA,MAKEC,eALF,GASIL,KATJ,CAKEK,eALF;AAAA,MAMEC,eANF,GASIN,KATJ,CAMEM,eANF;AAAA,MAOEC,YAPF,GASIP,KATJ,CAOEO,YAPF;AAAA,MAQEC,QARF,GASIR,KATJ,CAQEQ,QARF;AAUA,MAAMC,oBAAoB,GAAGlB,WAAW,CAAC,YAAM;AAC7Ca,IAAAA,YAAY,CAACF,IAAD,CAAZ;AACD,GAFuC,EAErC,CAACA,IAAD,EAAOE,YAAP,CAFqC,CAAxC;AAGA,MAAMM,mBAAmB,GAAGnB,WAAW,CACrC,UAAAoB,OAAO,EAAI;AACTN,IAAAA,eAAe,CAACH,IAAD,EAAOS,OAAP,CAAf;AACD,GAHoC,EAIrC,CAACT,IAAD,EAAOG,eAAP,CAJqC,CAAvC;AAMA,MAAMO,mBAAmB,GAAGrB,WAAW,CAAC,YAAM;AAC5Ce,IAAAA,eAAe,CAACJ,IAAD,CAAf;AACD,GAFsC,EAEpC,CAACA,IAAD,EAAOI,eAAP,CAFoC,CAAvC;AAGA,MAAMO,gBAAgB,GAAGtB,WAAW,CAAC,YAAM;AACzCgB,IAAAA,YAAY,CAACL,IAAD,CAAZ;AACD,GAFmC,EAEjC,CAACA,IAAD,EAAOK,YAAP,CAFiC,CAApC;AAGA,MAAMO,YAAY,GAAGvB,WAAW,CAAC,YAAM;AACrCiB,IAAAA,QAAQ,CAACN,IAAD,CAAR;AACD,GAF+B,EAE7B,CAACA,IAAD,EAAOM,QAAP,CAF6B,CAAhC;AAGA,SACE,oBAAC,UAAD;AACE,IAAA,CAAC,EAAC,MADJ;AAEE,IAAA,IAAI,EAAE;AACJO,MAAAA,OAAO,EAAE,CADL;AAEJC,MAAAA,KAAK,EAAE,GAFH;AAGJC,MAAAA,YAAY,EAAE,CAAC;AAHX,KAFR;AAOE,IAAA,OAAO,EAAE;AACPF,MAAAA,OAAO,EAAE,CADF;AAEPC,MAAAA,KAAK,EAAE,CAFA;AAGPC,MAAAA,YAAY,EAAE;AAHP,KAPX;AAYE,IAAA,IAAI,EAAE;AACJF,MAAAA,OAAO,EAAE,CADL;AAEJC,MAAAA,KAAK,EAAE,GAFH;AAGJC,MAAAA,YAAY,EAAE,CAAC;AAHX;AAZR,KAkBE,oBAAC,QAAD;AACE,IAAA,oBAAoB,EAAEhB,oBADxB;AAEE,IAAA,OAAO,EAAEC,IAAI,CAACS,OAFhB;AAGE,IAAA,MAAM,EAAET,IAAI,CAACgB,IAHf;AAIE,IAAA,SAAS,EAAEf,SAJb;AAKE,IAAA,gBAAgB,EAAEM,oBALpB;AAME,IAAA,eAAe,EAAEC,mBANnB;AAOE,IAAA,eAAe,EAAEE,mBAPnB;AAQE,IAAA,YAAY,EAAEC,gBARhB;AASE,IAAA,QAAQ,EAAEC;AATZ,IAlBF,CADF;AAgCD,CA7DM;AA+DP,eAAe,SAASK,QAAT,CAAkBnB,KAAlB,EAAwC;AACrD,MACEE,IADF,GAQIF,KARJ,CACEE,IADF;AAAA,MAEEkB,aAFF,GAQIpB,KARJ,CAEEoB,aAFF;AAAA,MAGEhB,YAHF,GAQIJ,KARJ,CAGEI,YAHF;AAAA,MAIEC,eAJF,GAQIL,KARJ,CAIEK,eAJF;AAAA,MAKEC,eALF,GAQIN,KARJ,CAKEM,eALF;AAAA,MAMEC,YANF,GAQIP,KARJ,CAMEO,YANF;AAAA,MAOEc,YAPF,GAQIrB,KARJ,CAOEqB,YAPF;AASA,MAAMC,aAAa,GAAG9B,MAAM,CAAC,IAAD,CAA5B;AAEA,SACE,oBAAC,gBAAD;AAAkB,IAAA,GAAG,EAAE8B,aAAvB;AAAsC,IAAA,CAAC,EAAC;AAAxC,IADF;AAID","sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport { AnimatePresence, View } from 'moti'\nimport {\n  PanGestureHandlerProps,\n  ScrollView\n} from 'react-native-gesture-handler'\nimport TaskItem from './task-item'\nimport { makeStyledComponent } from '../utils/styled'\n\nconst StyledView = makeStyledComponent(View)\nconst StyledScrollView = makeStyledComponent(ScrollView)\n\ninterface TaskItemData {\n  id: string\n  subject: string\n  done: boolean\n}\n\ninterface TaskListProps {\n  data: Array<TaskItemData>\n  editingItemId: string | null\n  onToggleItem: (item: TaskItemData) => void\n  onChangeSubject: (item: TaskItemData, newSubject: string) => void\n  onFinishEditing: (item: TaskItemData) => void\n  onPressLabel: (item: TaskItemData) => void\n  onRemoveItem: (item: TaskItemData) => void\n}\n\ninterface TaskItemProps\n  extends Pick<PanGestureHandlerProps, 'simultaneousHandlers'> {\n  data: TaskItemData\n  isEditing: boolean\n  onToggleItem: (item: TaskItemData) => void\n  onChangeSubject: (item: TaskItemData, newSubject: string) => void\n  onFinishEditing: (item: TaskItemData) => void\n  onPressLabel: (item: TaskItemData) => void\n  onRemove: (item: TaskItemData) => void\n}\n\nexport const AnimatedTaskItem = (props: TaskItemProps) => {\n  const {\n    simultaneousHandlers,\n    data,\n    isEditing,\n    onToggleItem,\n    onChangeSubject,\n    onFinishEditing,\n    onPressLabel,\n    onRemove\n  } = props\n  const handleToggleCheckbox = useCallback(() => {\n    onToggleItem(data)\n  }, [data, onToggleItem])\n  const handleChangeSubject = useCallback(\n    subject => {\n      onChangeSubject(data, subject)\n    },\n    [data, onChangeSubject]\n  )\n  const handleFinishEditing = useCallback(() => {\n    onFinishEditing(data)\n  }, [data, onFinishEditing])\n  const handlePressLabel = useCallback(() => {\n    onPressLabel(data)\n  }, [data, onPressLabel])\n  const handleRemove = useCallback(() => {\n    onRemove(data)\n  }, [data, onRemove])\n  return (\n    <StyledView\n      w=\"full\"\n      from={{\n        opacity: 0,\n        scale: 0.5,\n        marginBottom: -46\n      }}\n      animate={{\n        opacity: 1,\n        scale: 1,\n        marginBottom: 0\n      }}\n      exit={{\n        opacity: 0,\n        scale: 0.5,\n        marginBottom: -46\n      }}\n    >\n      <TaskItem\n        simultaneousHandlers={simultaneousHandlers}\n        subject={data.subject}\n        isDone={data.done}\n        isEditing={isEditing}\n        onToggleCheckbox={handleToggleCheckbox}\n        onChangeSubject={handleChangeSubject}\n        onFinishEditing={handleFinishEditing}\n        onPressLabel={handlePressLabel}\n        onRemove={handleRemove}\n      />\n    </StyledView>\n  )\n}\n\nexport default function TaskList(props: TaskListProps) {\n  const {\n    data,\n    editingItemId,\n    onToggleItem,\n    onChangeSubject,\n    onFinishEditing,\n    onPressLabel,\n    onRemoveItem\n  } = props\n  const refScrollView = useRef(null)\n\n  return (\n    <StyledScrollView ref={refScrollView} w=\"full\">\n    </StyledScrollView>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}