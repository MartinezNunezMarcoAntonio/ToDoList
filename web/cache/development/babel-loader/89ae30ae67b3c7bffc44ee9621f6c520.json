{"ast":null,"code":"import React, { useEffect, memo } from 'react';\nimport { Pressable, Text, HStack, Box } from 'native-base';\nimport Animated, { Easing, useSharedValue, useAnimatedStyle, withTiming, withSequence, withDelay, interpolateColor } from 'react-native-reanimated';\nvar AnimatedBox = Animated.createAnimatedComponent(Box);\nvar AnimatedHStack = Animated.createAnimatedComponent(HStack);\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nvar AnimatedTaskLabel = memo(function (props) {\n  var strikethrough = props.strikethrough,\n      textColor = props.textColor,\n      inactiveTextColor = props.inactiveTextColor,\n      onPress = props.onPress,\n      children = props.children;\n  var hstackOffset = useSharedValue(0);\n  var hstackAnimatedStyles = useAnimatedStyle(function () {\n    const _f = function () {\n      return {\n        transform: []\n      };\n    };\n\n    _f._closure = {};\n    _f.asString = \"function _f(){return{transform:[]};}\";\n    _f.__workletHash = 924652258524;\n    _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/animated-task-label.tsx (31:4)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [strikethrough]);\n  var textColorProgress = useSharedValue(0);\n  var textColorAnimatedStyles = useAnimatedStyle(function () {\n    const _f = function () {\n      return {\n        color: interpolateColor(textColorProgress.value, [0, 1], [textColor, inactiveTextColor])\n      };\n    };\n\n    _f._closure = {\n      interpolateColor,\n      textColorProgress,\n      textColor,\n      inactiveTextColor\n    };\n    _f.asString = \"function _f(){const{interpolateColor,textColorProgress,textColor,inactiveTextColor}=jsThis._closure;{return{color:interpolateColor(textColorProgress.value,[0,1],[textColor,inactiveTextColor])};}}\";\n    _f.__workletHash = 2196662475582;\n    _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/animated-task-label.tsx (38:4)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [strikethrough, textColor, inactiveTextColor]);\n  var strikethroughWidth = useSharedValue(0);\n  var strikethroughAnimatedStyles = useAnimatedStyle(function () {\n    const _f = function () {\n      return {\n        width: strikethroughWidth.value * 100 + \"%\",\n        borderBottomColor: interpolateColor(textColorProgress.value, [0, 1], [textColor, inactiveTextColor])\n      };\n    };\n\n    _f._closure = {\n      strikethroughWidth,\n      interpolateColor,\n      textColorProgress,\n      textColor,\n      inactiveTextColor\n    };\n    _f.asString = \"function _f(){const{strikethroughWidth,interpolateColor,textColorProgress,textColor,inactiveTextColor}=jsThis._closure;{return{width:strikethroughWidth.value*100+\\\"%\\\",borderBottomColor:interpolateColor(textColorProgress.value,[0,1],[textColor,inactiveTextColor])};}}\";\n    _f.__workletHash = 17372634946257;\n    _f.__location = \"/home/antonio/develop/react/react-native-animated-todo/src/components/animated-task-label.tsx (49:4)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [strikethrough, textColor, inactiveTextColor]);\n  useEffect(function () {\n    var easing = Easing.out(Easing.quad);\n\n    if (strikethrough) {\n      hstackOffset.value = withSequence(withTiming(4, {\n        duration: 200,\n        easing: easing\n      }), withTiming(0, {\n        duration: 200,\n        easing: easing\n      }));\n      strikethroughWidth.value = withTiming(1, {\n        duration: 400,\n        easing: easing\n      });\n      textColorProgress.value = withDelay(1000, withTiming(1, {\n        duration: 400,\n        easing: easing\n      }));\n    } else {\n      strikethroughWidth.value = withTiming(0, {\n        duration: 400,\n        easing: easing\n      });\n      textColorProgress.value = withTiming(0, {\n        duration: 400,\n        easing: easing\n      });\n    }\n  });\n  return React.createElement(Pressable, {\n    onPress: onPress\n  }, React.createElement(AnimatedHStack, {\n    alignItems: \"center\",\n    style: [hstackAnimatedStyles]\n  }, React.createElement(AnimatedText, {\n    fontSize: 19,\n    noOfLines: 1,\n    isTruncated: true,\n    px: 1,\n    style: [textColorAnimatedStyles]\n  }, children), React.createElement(AnimatedBox, {\n    position: \"absolute\",\n    h: 1,\n    borderBottomWidth: 1,\n    style: [strikethroughAnimatedStyles]\n  })));\n});\nexport default AnimatedTaskLabel;","map":{"version":3,"sources":["/home/antonio/develop/react/react-native-animated-todo/src/components/animated-task-label.tsx"],"names":["React","useEffect","memo","Pressable","Text","HStack","Box","Animated","Easing","useSharedValue","useAnimatedStyle","withTiming","withSequence","withDelay","interpolateColor","AnimatedBox","createAnimatedComponent","AnimatedHStack","AnimatedText","AnimatedTaskLabel","props","strikethrough","textColor","inactiveTextColor","onPress","children","hstackOffset","hstackAnimatedStyles","transform","textColorProgress","textColorAnimatedStyles","color","value","strikethroughWidth","strikethroughAnimatedStyles","width","borderBottomColor","easing","out","quad","duration"],"mappings":"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","sourcesContent":["import React, { useEffect, memo } from 'react'\nimport { Pressable, Text, HStack, Box } from 'native-base'\nimport Animated, {\n  Easing,\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  withSequence,\n  withDelay,\n  interpolateColor\n} from 'react-native-reanimated'\n\ninterface Props {\n  strikethrough: boolean\n  textColor: string\n  inactiveTextColor: string\n  onPress?: () => void\n  children?: React.ReactNode\n}\n\nconst AnimatedBox = Animated.createAnimatedComponent(Box)\nconst AnimatedHStack = Animated.createAnimatedComponent(HStack)\nconst AnimatedText = Animated.createAnimatedComponent(Text)\n\nconst AnimatedTaskLabel = memo((props: Props) => {\n  const { strikethrough, textColor, inactiveTextColor, onPress, children } =\n    props\n\n  const hstackOffset = useSharedValue(0)\n  const hstackAnimatedStyles = useAnimatedStyle(\n    () => ({\n      transform: []\n    }),\n    [strikethrough]\n  )\n  const textColorProgress = useSharedValue(0)\n  const textColorAnimatedStyles = useAnimatedStyle(\n    () => ({\n      color: interpolateColor(\n        textColorProgress.value,\n        [0, 1],\n        [textColor, inactiveTextColor]\n      )\n    }),\n    [strikethrough, textColor, inactiveTextColor]\n  )\n  const strikethroughWidth = useSharedValue(0)\n  const strikethroughAnimatedStyles = useAnimatedStyle(\n    () => ({\n      width: `${strikethroughWidth.value * 100}%`,\n      borderBottomColor: interpolateColor(\n        textColorProgress.value,\n        [0, 1],\n        [textColor, inactiveTextColor]\n      )\n    }),\n    [strikethrough, textColor, inactiveTextColor]\n  )\n\n  useEffect(() => {\n    const easing = Easing.out(Easing.quad)\n    if (strikethrough) {\n      hstackOffset.value = withSequence(\n        withTiming(4, { duration: 200, easing }),\n        withTiming(0, { duration: 200, easing })\n      )\n      strikethroughWidth.value = withTiming(1, { duration: 400, easing })\n      textColorProgress.value = withDelay(\n        1000,\n        withTiming(1, { duration: 400, easing })\n      )\n    } else {\n      strikethroughWidth.value = withTiming(0, { duration: 400, easing })\n      textColorProgress.value = withTiming(0, { duration: 400, easing })\n    }\n  })\n\n  return (\n    <Pressable onPress={onPress}>\n      <AnimatedHStack alignItems=\"center\" style={[hstackAnimatedStyles]}>\n        <AnimatedText\n          fontSize={19}\n          noOfLines={1}\n          isTruncated\n          px={1}\n          style={[textColorAnimatedStyles]}\n        >\n          {children}\n        </AnimatedText>\n        <AnimatedBox\n          position=\"absolute\"\n          h={1}\n          borderBottomWidth={1}\n          style={[strikethroughAnimatedStyles]}\n        />\n      </AnimatedHStack>\n    </Pressable>\n  )\n})\n\nexport default AnimatedTaskLabel\n"]},"metadata":{},"sourceType":"module"}